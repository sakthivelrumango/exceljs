{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/cell-xform.js"],"names":["utils","require","BaseXform","Range","Enums","RichTextXform","getValueType","v","undefined","ValueType","Null","String","Number","Boolean","Date","text","hyperlink","Hyperlink","formula","Formula","error","Error","getEffectiveCellType","cell","type","result","CellXform","richTextXForm","model","options","styleId","styles","addStyleModel","style","comment","comments","push","ref","address","sharedStrings","ssId","add","value","date1904","hyperlinks","Object","assign","target","tooltip","Merge","merges","shareType","si","siFormulae","formulae","sharedFormula","master","range","expandToAddress","xmlStream","attrs","t","leafNode","addAttribute","dateToExcel","openNode","richText","forEach","render","closeNode","renderFormula","node","parser","parseOpen","name","attributes","r","s","parseInt","currentNode","parseText","xmlDecode","parseFloat","parseClose","getStyleModel","getString","RichText","isDateFmt","numFmt","excelToDate","hyperlinkMap","commentsMap","module","exports"],"mappings":"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","sourcesContent":["const utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\nconst Range = require('../../../doc/range');\nconst Enums = require('../../../doc/enums');\n\nconst RichTextXform = require('../strings/rich-text-xform');\n\nfunction getValueType(v) {\n  if (v === null || v === undefined) {\n    return Enums.ValueType.Null;\n  }\n  if (v instanceof String || typeof v === 'string') {\n    return Enums.ValueType.String;\n  }\n  if (typeof v === 'number') {\n    return Enums.ValueType.Number;\n  }\n  if (typeof v === 'boolean') {\n    return Enums.ValueType.Boolean;\n  }\n  if (v instanceof Date) {\n    return Enums.ValueType.Date;\n  }\n  if (v.text && v.hyperlink) {\n    return Enums.ValueType.Hyperlink;\n  }\n  if (v.formula) {\n    return Enums.ValueType.Formula;\n  }\n  if (v.error) {\n    return Enums.ValueType.Error;\n  }\n  throw new Error('I could not understand type of value');\n}\n\nfunction getEffectiveCellType(cell) {\n  switch (cell.type) {\n    case Enums.ValueType.Formula:\n      return getValueType(cell.result);\n    default:\n      return cell.type;\n  }\n}\n\nclass CellXform extends BaseXform {\n  constructor() {\n    super();\n\n    this.richTextXForm = new RichTextXform();\n  }\n\n  get tag() {\n    return 'c';\n  }\n\n  prepare(model, options) {\n    const styleId = options.styles.addStyleModel(model.style || {}, getEffectiveCellType(model));\n    if (styleId) {\n      model.styleId = styleId;\n    }\n\n    if (model.comment) {\n      options.comments.push({...model.comment, ref: model.address});\n    }\n\n    switch (model.type) {\n      case Enums.ValueType.String:\n        if (options.sharedStrings) {\n          model.ssId = options.sharedStrings.add(model.value);\n        }\n        break;\n\n      case Enums.ValueType.Date:\n        if (options.date1904) {\n          model.date1904 = true;\n        }\n        break;\n\n      case Enums.ValueType.Hyperlink:\n        if (options.sharedStrings && model.text !== undefined && model.text !== null) {\n          model.ssId = options.sharedStrings.add(model.text);\n        }\n        options.hyperlinks.push(\n          Object.assign(\n            {\n              address: model.address,\n              target: model.hyperlink,\n            },\n            model.tooltip ? {tooltip: model.tooltip} : {}\n          )\n        );\n        break;\n\n      case Enums.ValueType.Merge:\n        options.merges.add(model);\n        break;\n\n      case Enums.ValueType.Formula:\n        if (options.date1904) {\n          // in case valueType is date\n          model.date1904 = true;\n        }\n\n        if (model.shareType === 'shared') {\n          model.si = options.siFormulae++;\n        }\n\n        if (model.formula) {\n          options.formulae[model.address] = model;\n        } else if (model.sharedFormula) {\n          const master = options.formulae[model.sharedFormula];\n          if (!master) {\n            throw new Error('Shared Formula master must exist above and or left of clone');\n          }\n          if (master.si === undefined) {\n            master.shareType = 'shared';\n            master.si = options.siFormulae++;\n            master.range = new Range(master.address, model.address);\n          } else if (master.range) {\n            master.range.expandToAddress(model.address);\n          }\n          model.si = master.si;\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  renderFormula(xmlStream, model) {\n    let attrs = null;\n    switch (model.shareType) {\n      case 'shared':\n        attrs = {\n          t: 'shared',\n          ref: model.ref || model.range.range,\n          si: model.si,\n        };\n        break;\n\n      case 'array':\n        attrs = {\n          t: 'array',\n          ref: model.ref,\n        };\n        break;\n\n      default:\n        if (model.si !== undefined) {\n          attrs = {\n            t: 'shared',\n            si: model.si,\n          };\n        }\n        break;\n    }\n\n    switch (getValueType(model.result)) {\n      case Enums.ValueType.Null: // ?\n        xmlStream.leafNode('f', attrs, model.formula);\n        break;\n\n      case Enums.ValueType.String:\n        // oddly, formula results don't ever use shared strings\n        xmlStream.addAttribute('t', 'str');\n        xmlStream.leafNode('f', attrs, model.formula);\n        xmlStream.leafNode('v', null, model.result);\n        break;\n\n      case Enums.ValueType.Number:\n        xmlStream.leafNode('f', attrs, model.formula);\n        xmlStream.leafNode('v', null, model.result);\n        break;\n\n      case Enums.ValueType.Boolean:\n        xmlStream.addAttribute('t', 'b');\n        xmlStream.leafNode('f', attrs, model.formula);\n        xmlStream.leafNode('v', null, model.result ? 1 : 0);\n        break;\n\n      case Enums.ValueType.Error:\n        xmlStream.addAttribute('t', 'e');\n        xmlStream.leafNode('f', attrs, model.formula);\n        xmlStream.leafNode('v', null, model.result.error);\n        break;\n\n      case Enums.ValueType.Date:\n        xmlStream.leafNode('f', attrs, model.formula);\n        xmlStream.leafNode('v', null, utils.dateToExcel(model.result, model.date1904));\n        break;\n\n      // case Enums.ValueType.Hyperlink: // ??\n      // case Enums.ValueType.Formula:\n      default:\n        throw new Error('I could not understand type of value');\n    }\n  }\n\n  render(xmlStream, model) {\n    if (model.type === Enums.ValueType.Null && !model.styleId) {\n      // if null and no style, exit\n      return;\n    }\n\n    xmlStream.openNode('c');\n    xmlStream.addAttribute('r', model.address);\n\n    if (model.styleId) {\n      xmlStream.addAttribute('s', model.styleId);\n    }\n\n    switch (model.type) {\n      case Enums.ValueType.Null:\n        break;\n\n      case Enums.ValueType.Number:\n        xmlStream.leafNode('v', null, model.value);\n        break;\n\n      case Enums.ValueType.Boolean:\n        xmlStream.addAttribute('t', 'b');\n        xmlStream.leafNode('v', null, model.value ? '1' : '0');\n        break;\n\n      case Enums.ValueType.Error:\n        xmlStream.addAttribute('t', 'e');\n        xmlStream.leafNode('v', null, model.value.error);\n        break;\n\n      case Enums.ValueType.String:\n        if (model.ssId !== undefined) {\n          xmlStream.addAttribute('t', 's');\n          xmlStream.leafNode('v', null, model.ssId);\n        } else if (model.value && model.value.richText) {\n          xmlStream.addAttribute('t', 'inlineStr');\n          xmlStream.openNode('is');\n          model.value.richText.forEach(text => {\n            this.richTextXForm.render(xmlStream, text);\n          });\n          xmlStream.closeNode('is');\n        } else {\n          xmlStream.addAttribute('t', 'str');\n          xmlStream.leafNode('v', null, model.value);\n        }\n        break;\n\n      case Enums.ValueType.Date:\n        xmlStream.leafNode('v', null, utils.dateToExcel(model.value, model.date1904));\n        break;\n\n      case Enums.ValueType.Hyperlink:\n        if (model.ssId !== undefined) {\n          xmlStream.addAttribute('t', 's');\n          xmlStream.leafNode('v', null, model.ssId);\n        } else {\n          xmlStream.addAttribute('t', 'str');\n          xmlStream.leafNode('v', null, model.text);\n        }\n        break;\n\n      case Enums.ValueType.Formula:\n        this.renderFormula(xmlStream, model);\n        break;\n\n      case Enums.ValueType.Merge:\n        // nothing to add\n        break;\n\n      default:\n        break;\n    }\n\n    xmlStream.closeNode(); // </c>\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case 'c':\n        // const address = colCache.decodeAddress(node.attributes.r);\n        this.model = {\n          address: node.attributes.r,\n        };\n        this.t = node.attributes.t;\n        if (node.attributes.s) {\n          this.model.styleId = parseInt(node.attributes.s, 10);\n        }\n        return true;\n\n      case 'f':\n        this.currentNode = 'f';\n        this.model.si = node.attributes.si;\n        this.model.shareType = node.attributes.t;\n        this.model.ref = node.attributes.ref;\n        return true;\n\n      case 'v':\n        this.currentNode = 'v';\n        return true;\n\n      case 't':\n        this.currentNode = 't';\n        return true;\n\n      case 'r':\n        this.parser = this.richTextXForm;\n        this.parser.parseOpen(node);\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n      return;\n    }\n    switch (this.currentNode) {\n      case 'f':\n        this.model.formula = this.model.formula ? this.model.formula + text : text;\n        break;\n      case 'v':\n      case 't':\n        if (this.model.value && this.model.value.richText) {\n          this.model.value.richText.text = this.model.value.richText.text ? this.model.value.richText.text + text : text;\n        } else {\n          this.model.value = this.model.value ? this.model.value + text : text;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  parseClose(name) {\n    switch (name) {\n      case 'c': {\n        const {model} = this;\n\n        // first guess on cell type\n        if (model.formula || model.shareType) {\n          model.type = Enums.ValueType.Formula;\n          if (model.value) {\n            if (this.t === 'str') {\n              model.result = utils.xmlDecode(model.value);\n            } else if (this.t === 'b') {\n              model.result = parseInt(model.value, 10) !== 0;\n            } else if (this.t === 'e') {\n              model.result = {error: model.value};\n            } else {\n              model.result = parseFloat(model.value);\n            }\n            model.value = undefined;\n          }\n        } else if (model.value !== undefined) {\n          switch (this.t) {\n            case 's':\n              model.type = Enums.ValueType.String;\n              model.value = parseInt(model.value, 10);\n              break;\n            case 'str':\n              model.type = Enums.ValueType.String;\n              model.value = utils.xmlDecode(model.value);\n              break;\n            case 'inlineStr':\n              model.type = Enums.ValueType.String;\n              break;\n            case 'b':\n              model.type = Enums.ValueType.Boolean;\n              model.value = parseInt(model.value, 10) !== 0;\n              break;\n            case 'e':\n              model.type = Enums.ValueType.Error;\n              model.value = {error: model.value};\n              break;\n            default:\n              model.type = Enums.ValueType.Number;\n              model.value = parseFloat(model.value);\n              break;\n          }\n        } else if (model.styleId) {\n          model.type = Enums.ValueType.Null;\n        } else {\n          model.type = Enums.ValueType.Merge;\n        }\n        return false;\n      }\n\n      case 'f':\n      case 'v':\n      case 'is':\n        this.currentNode = undefined;\n        return true;\n\n      case 't':\n        if (this.parser) {\n          this.parser.parseClose(name);\n          return true;\n        }\n        this.currentNode = undefined;\n        return true;\n\n      case 'r':\n        this.model.value = this.model.value || {};\n        this.model.value.richText = this.model.value.richText || [];\n        this.model.value.richText.push(this.parser.model);\n        this.parser = undefined;\n        this.currentNode = undefined;\n        return true;\n\n      default:\n        if (this.parser) {\n          this.parser.parseClose(name);\n          return true;\n        }\n        return false;\n    }\n  }\n\n  reconcile(model, options) {\n    const style = model.styleId && options.styles && options.styles.getStyleModel(model.styleId);\n    if (style) {\n      model.style = style;\n    }\n    if (model.styleId !== undefined) {\n      model.styleId = undefined;\n    }\n\n    switch (model.type) {\n      case Enums.ValueType.String:\n        if (typeof model.value === 'number') {\n          if (options.sharedStrings) {\n            model.value = options.sharedStrings.getString(model.value);\n          }\n        }\n        if (model.value.richText) {\n          model.type = Enums.ValueType.RichText;\n        }\n        break;\n\n      case Enums.ValueType.Number:\n        if (style && utils.isDateFmt(style.numFmt)) {\n          model.type = Enums.ValueType.Date;\n          model.value = utils.excelToDate(model.value, options.date1904);\n        }\n        break;\n\n      case Enums.ValueType.Formula:\n        if (model.result !== undefined && style && utils.isDateFmt(style.numFmt)) {\n          model.result = utils.excelToDate(model.result, options.date1904);\n        }\n        if (model.shareType === 'shared') {\n          if (model.ref) {\n            // master\n            options.formulae[model.si] = model.address;\n          } else {\n            // slave\n            model.sharedFormula = options.formulae[model.si];\n            delete model.shareType;\n          }\n          delete model.si;\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    // look for hyperlink\n    const hyperlink = options.hyperlinkMap[model.address];\n    if (hyperlink) {\n      if (model.type === Enums.ValueType.Formula) {\n        model.text = model.result;\n        model.result = undefined;\n      } else {\n        model.text = model.value;\n        model.value = undefined;\n      }\n      model.type = Enums.ValueType.Hyperlink;\n      model.hyperlink = hyperlink;\n    }\n\n    const comment = options.commentsMap && options.commentsMap[model.address];\n    if (comment) {\n      model.comment = comment;\n    }\n  }\n}\n\nmodule.exports = CellXform;\n"],"file":"cell-xform.js"}